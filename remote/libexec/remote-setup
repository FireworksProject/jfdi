#!/usr/bin/env python
# Usage: remote setup
# Summary: Setup configuration. (Do not run on local machines.)
# Help: Dotfiles, NGINX configs, etc. Remember, this script is run by root.

from os import path, stat, chown, chmod, listdir, symlink
import shutil

from lib import remote, pyutil

def main():
    info = remote.info()
    set_bashrc(info)
    configure_nginx(info)
    set_www_apps(info)
    print ''
    print 'All done.'
    return

def set_bashrc(info):
    src = path.join(info.confdir, '.bashrc')
    dest = path.join(info.homedir, '.bashrc')

    if path.exists(dest) and pyutil.files_equal(src, dest):
        print ".bashrc already installed."
    else:
        print "Installing .bashrc ..."
        shutil.copy(src, dest)
        chown(dest, info.userid, info.groupid)
        chmod(dest, 0640)
        print "  .bashrc installed."
    return

def configure_nginx(info):
    print "Configuring NGINX ..."
    src = path.join(info.confdir, 'nginx', 'nginx.conf')
    dest = "/etc/nginx/nginx.conf"

    if path.exists(dest) and pyutil.files_equal(src, dest):
        print "  nginx.conf already installed."
    else:
        print "Installing nginx.conf ..."
        shutil.copy(src, dest)
        chown(dest, 0, 0)
        chmod(dest, 0644)
        print "  nginx.conf installed."

    return

def set_www_apps(info):
    print "Installing webapps ..."
    sites_src = path.join(info.confdir, 'sites-available')

    for fname in listdir(sites_src):
        if fname[0] == '.':
            continue

        src = path.join(sites_src, fname)
        dest = path.join("/etc/nginx/sites-available", fname)

        if not path.exists(dest) or not pyutil.files_equal(src, dest):
            print "  installing vhost for '%s'," % fname
            shutil.copy(src, dest)
            chown(dest, 0, 0)
            chmod(dest, 0644)
            dest_link = path.join("/etc/nginx/sites-enabled", fname)
            if not path.exists(dest_link):
                symlink(dest, dest_link)

        fpm_src = path.join(info.confdir, 'fpm-pools', "%s.conf" % fname)
        fpm_dest = "/etc/php5/fpm/pool.d/%s.conf" % fname
        if not path.exists(fpm_src):
            continue

        if not path.exists(fpm_dest) or not pyutil.files_equal(fpm_src, fpm_dest):
            print "  installing FPM pool for '%s'," % fname
            shutil.copy(fpm_src, fpm_dest)
            chown(dest, 0, 0)
            chmod(dest, 0644)

    print "  Webapps installed."
    return

if __name__ == '__main__':
    main()
