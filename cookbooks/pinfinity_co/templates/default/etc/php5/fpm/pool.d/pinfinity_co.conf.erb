[pinfinity_co]

listen = /var/run/php5-fpm-pinfinity_co.socket
listen.backlog = -1

; Unix user/group of processes
user = www-data
group = www-data

; Choose how the process manager will control the number of child processes.
; The other option is 'static', which means the process manager will not spawn
; or kill processes depending on load, like it does in 'dynamic' mode.
pm = dynamic

; At any time, there can be no more than max_children child processes.
; If you know how much memory each process consumes regularly
; and how much free memory you have on your system, this is how
; you set a "hard limit" on the amount of memory php-fpm will be able to consume.
pm.max_children = 75

; When php-fpm first starts, how many processes should it immediately generate
; to handle requests? When you restart php-fpm, there may be an influx of
; requests, but spawning a new process can take time (albeit very small), so
; we want to go ahead and have some ready to go.
pm.start_servers = 10

; If there are no requests currently, how many spare processes should we
; always make sure to keep around? There is a cost in spawning new processes,
; so having some always ready to go is a good idea. The offset is that they
; will be taking up memory that your system might otherwise be able to use for
; other things.
pm.min_spare_servers = 5

pm.max_spare_servers = 20
pm.max_requests = 500

; Pass environment variables
env[HOSTNAME] = $HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp
